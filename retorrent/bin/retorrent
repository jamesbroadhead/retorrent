#!/usr/bin/python
"""
retorrent - a media management tool

Author: James Broadhead jamesbroadhead@gmail.com
"""
from glob import glob
import logging
import os
from os.path import exists as pexists
from os.path import basename, dirname, expanduser
import sys

from os_utils.context_handlers import cd
from retorrentlib import retorrenter, confparse

from optparse import OptionParser

def main():

    options, argv = parse_args()

    if options.debug:
        logging.basicConfig(level=logging.INFO)

    args = parse_argv(argv)

    if not args:
        print 'File(s) not found'
        sys.exit(1)

    config = { 'retorrentconf':
            confparse.parse_retorrentconf(options.configdir),
        'parse_fileext_details':
            confparse.parse_fileext_details(options.configdir),
        'parse_divider_symbols':
            confparse.parse_divider_symbols(options.configdir),
        'find_removelist':
            confparse.find_removelist(options.configdir)}

    # TODO : proper logging, remove the options.debug arg
    r = retorrenter.retorrenter(config, debug=options.debug)

    # get args (folders / files which are 100% downloaded.
    commands = r.handle_args(args)

    run_and_check(r, commands)
    print 'Running symlinker...'
    os.system('symlinker')

def run_and_check(r, output):
    for out in output:
        for cmd in out['commands']:
            os.system(cmd)
        if out['commands']:
            check_symlinks(r, out['symlinks'], out['commands'])

def check_symlinks(r, symlinks, commands):
    output = r.check_symlinks(symlinks)
    if not output['success']:
        for symlink in output['broken']:
            print "!!!! " +  symlink + " is a broken symlink."
        print "Broken symlinks - fix them then start the torrentfile"
        print "Torrentfile: \t", output['torrentfile']
        print 'Commands issued:'
        for command in commands:
            print '>> ', command

        sys.exit("Broken Symlinks - bailing!")

def parse_args():
    parser = OptionParser()

    parser.add_option('-c', '--config-dir',
                    help='Specify alternate config dir',
                    dest='configdir',
                    default='')

    parser.add_option('-d', '--debug',
                    help='Print debug messages (where implemented)',
                    action='store_true',
                    dest='debug',
                    default=False)

    options, args = parser.parse_args()

    return options, args

def print_optionstructions():
    print
    print '<WORD> will remove WORD this time only'
    print '"-<WORD> will add WORD to the REMOVE_LIST'
    print '"+<WORD>" will set the dir to be WORD'
    print

def parse_argv(argv):
    """
    Returns existing paths, and if the prefix is passed, all matching <prefix>*
    """
    args = []
    for a in argv:
        if not pexists(a):
            paths = myglob(a)
            paths.sort()
            args.extend(paths)
        else:
            args.append(a)
    return args

def myglob(arg):
    paths = []
    partial_fn = basename(arg)
    for f in os.listdir(dirname(arg)):
        if f.startswith(partial_fn):
            paths.append(os.path.join(dirname(arg),f))
    return paths

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
